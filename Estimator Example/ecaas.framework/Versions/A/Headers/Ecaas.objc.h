// Objective-C API for talking to github.com/syllabix/ecaas Go package.
//   gobind -lang=objc github.com/syllabix/ecaas
//
// File is generated by gobind. Do not edit.

#ifndef __Ecaas_H__
#define __Ecaas_H__

@import Foundation;
#include "Universe.objc.h"


@class EcaasEstimateRange;
@class EcaasJobDetails;
@protocol EcaasMoveType;
@class EcaasMoveType;

@protocol EcaasMoveType <NSObject>
- (NSString*)getMultiplier;
- (NSString*)getName;
- (NSString*)getTaxRate;
@end

/**
 * EstimateRange models a low to high range of possible cost for an estimate
 */
@interface EcaasEstimateRange : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
- (NSString*)low;
- (void)setLow:(NSString*)v;
- (NSString*)high;
- (void)setHigh:(NSString*)v;
@end

/**
 * The JobDetails struct is an entity the contains critical values for a move, hourly rate and a preferred move
 */
@interface EcaasJobDetails : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
/**
 * NewJobDetails is a constructor for a JobDetails struct
 */
- (instancetype)init:(double)hours hourlyRate:(NSString*)hourlyRate preferredMoveDate:(NSString*)preferredMoveDate;
- (double)hours;
- (void)setHours:(double)v;
- (NSString*)hourlyRate;
- (void)setHourlyRate:(NSString*)v;
- (NSString*)preferredMoveDate;
- (void)setPreferredMoveDate:(NSString*)v;
@end

@interface Ecaas : NSObject
/**
 * ErrorInvalidDateFormat is a an error that should be used to handle invalid date formats
 */
+ (NSError*) errorInvalidDateFormat;
+ (void) setErrorInvalidDateFormat:(NSError*)v;

@end

/**
 * CalculateTotalCost is a function used to total and provide an estimate range
for a move based upon the following business rules:
	1. Multiply total estimated hours by the provided hourly rate for an initial subtotal
 2. Apply the cost multiplier - effectively a service fee - to the subtotal
 3. Apply tax to the subtotal plus service fee to generate the low end of the etimate
 4. To estimate the high end of the estimate, if the preferred move date is on Friday or Saturday
		- add a complexity factor of 30% of the low estimate before tax - otherwise add a standard 15% weekday
		complexity factor to get a estimate high end subtotal
 5. Apply tax to the high end of the estimate, end return the range formatted in USD
 */
FOUNDATION_EXPORT EcaasEstimateRange* EcaasCalculateTotalCost(EcaasJobDetails* details, id<EcaasMoveType> moveType);

/**
 * NewJobDetails is a constructor for a JobDetails struct
 */
FOUNDATION_EXPORT EcaasJobDetails* EcaasNewJobDetails(double hours, NSString* hourlyRate, NSString* preferredMoveDate);

@class EcaasMoveType;

/**
 * MoveType describes the kind of move being conducted, and it's multiplier on the total job cost
 */
@interface EcaasMoveType : NSObject <goSeqRefInterface, EcaasMoveType> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (NSString*)getMultiplier;
- (NSString*)getName;
- (NSString*)getTaxRate;
@end

#endif
